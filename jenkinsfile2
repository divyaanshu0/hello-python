pipeline {
    agent any

    environment {
        REPO_URL = "https://github.com/divyaanshu0/hello-python.git"
        BRANCH = "main"
        IMAGE_NAME = "pythoncicd"
        TEST_CONTAINER_NAME = "pythoncicd_test"
        PROD_CONTAINER_NAME = "pythoncicd_prod"
        TEST_PORT = "5002"
        PROD_PORT = "5001"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: "${BRANCH}", url: "${REPO_URL}"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Enable BuildKit to remove deprecation warning
                    sh "export DOCKER_BUILDKIT=1"
                    sh "docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."
                }
            }
        }

        stage('Deploy Test Container') {
            steps {
                script {
                    try {
                        // Stop and remove previous test container if it exists
                        sh "docker stop ${TEST_CONTAINER_NAME} || true"
                        sh "docker rm ${TEST_CONTAINER_NAME} || true"

                        // Run test container on test port (5002)
                        sh "docker run -d -p ${TEST_PORT}:5000 --name ${TEST_CONTAINER_NAME} ${IMAGE_NAME}:${BUILD_NUMBER}"
                        sleep 5  // Wait for startup

                        // Get container IP
                        def testContainerIP = sh(script: "docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${TEST_CONTAINER_NAME}", returnStdout: true).trim()

                        // Output test container details
                        echo "‚úÖ Test container is running at: http://${testContainerIP}:${TEST_PORT}"
                        echo "‚úÖ Open in browser and verify before proceeding."
                    } catch (Exception e) {
                        error("‚ùå Test container deployment failed! Check logs.")
                    }
                }
            }
        }

        stage('Approval for Production Deployment') {
            steps {
                input message: "Do you approve deployment to production?", ok: "Deploy"
            }
        }

        stage('Deploy Production Container') {
            steps {
                script {
                    // Check if the production port (5001) is available
                    def portCheck = sh(script: "netstat -tulnp | grep ':${PROD_PORT} ' || echo 'free'", returnStdout: true).trim()
                    if (!portCheck.contains("free")) {
                        error("‚ùå Port ${PROD_PORT} is already in use! Change the port or stop the process using it.")
                    }

                    sh """
                    echo "üîÑ Stopping and removing any existing production container..."
                    docker stop ${PROD_CONTAINER_NAME} || true
                    docker rm ${PROD_CONTAINER_NAME} || true

                    echo "üöÄ Running new production container on port ${PROD_PORT}..."
                    docker run -d -p ${PROD_PORT}:5000 --name ${PROD_CONTAINER_NAME} ${IMAGE_NAME}:${BUILD_NUMBER}
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Production deployment complete at: http://localhost:${PROD_PORT}"
        }
        failure {
            echo "‚ùå Deployment failed! Check logs for details."
        }
    }
}
