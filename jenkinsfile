pipeline {
    agent any

    environment {
        REPO_URL = "https://github.com/divyaanshu0/hello-python.git"
        BRANCH = "main"
        IMAGE_NAME = "pythoncicd"  // Fixed: Lowercase name
        TEST_CONTAINER_NAME = "pythoncicd_test"
        CONTAINER_NAME = "pythoncicd_app"
        TEST_PORT = "5002"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: "${BRANCH}", url: "${REPO_URL}"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Enable BuildKit to remove the warning
                    sh "export DOCKER_BUILDKIT=1"
                    sh "docker build -t ${IMAGE_NAME}:latest ."
                }
            }
        }

        stage('Test Container') {
            steps {
                script {
                    try {
                        // Stop and remove previous test container if exists
                        sh "docker stop ${TEST_CONTAINER_NAME} || true"
                        sh "docker rm ${TEST_CONTAINER_NAME} || true"

                        // Run test container on test port
                        sh "docker run -d --rm -p ${TEST_PORT}:5001 --name ${TEST_CONTAINER_NAME} ${IMAGE_NAME}:latest"
                        sleep 5  // Wait for container startup

                        // Check if the application is responding
                        def result = sh(script: "curl -f http://localhost:${TEST_PORT}", returnStatus: true)
                        if (result != 0) {
                            error("Test container failed!")
                        }
                    } finally {
                        sh "docker stop ${TEST_CONTAINER_NAME} || true"
                    }
                }
            }
        }

        stage('Deploy Container') {
            steps {
                script {
                    // Check if port 5001 is available before running
                    def portCheck = sh(script: "netstat -tulnp | grep ':5001 ' || echo 'free'", returnStdout: true).trim()
                    if (!portCheck.contains("free")) {
                        error("Port 5001 is already in use! Change the port or stop the process using it.")
                    }

                    sh """
                    echo "Stopping and removing any existing container..."
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true

                    echo "Running new container..."
                    docker run -d -p 5001:5001 --name ${CONTAINER_NAME} ${IMAGE_NAME}:latest
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ Application successfully deployed at: http://localhost:5001"
        }
        failure {
            echo "❌ Build or deployment failed! Check logs for details."
        }
    }
}
